// Code generated by pggen. DO NOT EDIT.

package query

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"time"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateSession(ctx context.Context, params CreateSessionParams) (pgconn.CommandTag, error)
	// CreateSessionBatch enqueues a CreateSession query into batch to be executed
	// later by the batch.
	CreateSessionBatch(batch genericBatch, params CreateSessionParams)
	// CreateSessionScan scans the result of an executed CreateSessionBatch query.
	CreateSessionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	GetSession(ctx context.Context, sessionID string) (GetSessionRow, error)
	// GetSessionBatch enqueues a GetSession query into batch to be executed
	// later by the batch.
	GetSessionBatch(batch genericBatch, sessionID string)
	// GetSessionScan scans the result of an executed GetSessionBatch query.
	GetSessionScan(results pgx.BatchResults) (GetSessionRow, error)

	UpdateSessionID(ctx context.Context, params UpdateSessionIDParams) (pgconn.CommandTag, error)
	// UpdateSessionIDBatch enqueues a UpdateSessionID query into batch to be executed
	// later by the batch.
	UpdateSessionIDBatch(batch genericBatch, params UpdateSessionIDParams)
	// UpdateSessionIDScan scans the result of an executed UpdateSessionIDBatch query.
	UpdateSessionIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteSession(ctx context.Context, sessionID string) (pgconn.CommandTag, error)
	// DeleteSessionBatch enqueues a DeleteSession query into batch to be executed
	// later by the batch.
	DeleteSessionBatch(batch genericBatch, sessionID string)
	// DeleteSessionScan scans the result of an executed DeleteSessionBatch query.
	DeleteSessionScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, createSessionSQL, createSessionSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateSession': %w", err)
	}
	if _, err := p.Prepare(ctx, getSessionSQL, getSessionSQL); err != nil {
		return fmt.Errorf("prepare query 'GetSession': %w", err)
	}
	if _, err := p.Prepare(ctx, updateSessionIDSQL, updateSessionIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateSessionID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteSessionSQL, deleteSessionSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteSession': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const createSessionSQL = `INSERT INTO
    session(
            session_id,
            account_id,
            ip_address,
            user_agent,
            expire_at
            )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
       );`

type CreateSessionParams struct {
	SessionID string
	AccountID int
	IpAddress string
	UserAgent string
	ExpireAt  time.Time
}

// CreateSession implements Querier.CreateSession.
func (q *DBQuerier) CreateSession(ctx context.Context, params CreateSessionParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateSession")
	cmdTag, err := q.conn.Exec(ctx, createSessionSQL, params.SessionID, params.AccountID, params.IpAddress, params.UserAgent, params.ExpireAt)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query CreateSession: %w", err)
	}
	return cmdTag, err
}

// CreateSessionBatch implements Querier.CreateSessionBatch.
func (q *DBQuerier) CreateSessionBatch(batch genericBatch, params CreateSessionParams) {
	batch.Queue(createSessionSQL, params.SessionID, params.AccountID, params.IpAddress, params.UserAgent, params.ExpireAt)
}

// CreateSessionScan implements Querier.CreateSessionScan.
func (q *DBQuerier) CreateSessionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec CreateSessionBatch: %w", err)
	}
	return cmdTag, err
}

const getSessionSQL = `SELECT *
FROM session
WHERE session_id = $1;`

type GetSessionRow struct {
	SessionID string    `json:"session_id"`
	AccountID *int      `json:"account_id"`
	IpAddress string    `json:"ip_address"`
	UserAgent *string   `json:"user_agent"`
	ExpireAt  time.Time `json:"expire_at"`
}

// GetSession implements Querier.GetSession.
func (q *DBQuerier) GetSession(ctx context.Context, sessionID string) (GetSessionRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetSession")
	row := q.conn.QueryRow(ctx, getSessionSQL, sessionID)
	var item GetSessionRow
	if err := row.Scan(&item.SessionID, &item.AccountID, &item.IpAddress, &item.UserAgent, &item.ExpireAt); err != nil {
		return item, fmt.Errorf("query GetSession: %w", err)
	}
	return item, nil
}

// GetSessionBatch implements Querier.GetSessionBatch.
func (q *DBQuerier) GetSessionBatch(batch genericBatch, sessionID string) {
	batch.Queue(getSessionSQL, sessionID)
}

// GetSessionScan implements Querier.GetSessionScan.
func (q *DBQuerier) GetSessionScan(results pgx.BatchResults) (GetSessionRow, error) {
	row := results.QueryRow()
	var item GetSessionRow
	if err := row.Scan(&item.SessionID, &item.AccountID, &item.IpAddress, &item.UserAgent, &item.ExpireAt); err != nil {
		return item, fmt.Errorf("scan GetSessionBatch row: %w", err)
	}
	return item, nil
}

const updateSessionIDSQL = `UPDATE session
SET session_id = $1,
    expire_at = $2
WHERE session_id = $3;`

type UpdateSessionIDParams struct {
	NewSessionID string
	ExpireAt     time.Time
	OldSessionID string
}

// UpdateSessionID implements Querier.UpdateSessionID.
func (q *DBQuerier) UpdateSessionID(ctx context.Context, params UpdateSessionIDParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateSessionID")
	cmdTag, err := q.conn.Exec(ctx, updateSessionIDSQL, params.NewSessionID, params.ExpireAt, params.OldSessionID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateSessionID: %w", err)
	}
	return cmdTag, err
}

// UpdateSessionIDBatch implements Querier.UpdateSessionIDBatch.
func (q *DBQuerier) UpdateSessionIDBatch(batch genericBatch, params UpdateSessionIDParams) {
	batch.Queue(updateSessionIDSQL, params.NewSessionID, params.ExpireAt, params.OldSessionID)
}

// UpdateSessionIDScan implements Querier.UpdateSessionIDScan.
func (q *DBQuerier) UpdateSessionIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateSessionIDBatch: %w", err)
	}
	return cmdTag, err
}

const deleteSessionSQL = `DELETE
FROM session
WHERE session_id = $1;`

// DeleteSession implements Querier.DeleteSession.
func (q *DBQuerier) DeleteSession(ctx context.Context, sessionID string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteSession")
	cmdTag, err := q.conn.Exec(ctx, deleteSessionSQL, sessionID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteSession: %w", err)
	}
	return cmdTag, err
}

// DeleteSessionBatch implements Querier.DeleteSessionBatch.
func (q *DBQuerier) DeleteSessionBatch(batch genericBatch, sessionID string) {
	batch.Queue(deleteSessionSQL, sessionID)
}

// DeleteSessionScan implements Querier.DeleteSessionScan.
func (q *DBQuerier) DeleteSessionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteSessionBatch: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
