// Code generated by pggen. DO NOT EDIT.

package query

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	GetCategoryByID(ctx context.Context, categoryID int) (GetCategoryByIDRow, error)
	// GetCategoryByIDBatch enqueues a GetCategoryByID query into batch to be executed
	// later by the batch.
	GetCategoryByIDBatch(batch genericBatch, categoryID int)
	// GetCategoryByIDScan scans the result of an executed GetCategoryByIDBatch query.
	GetCategoryByIDScan(results pgx.BatchResults) (GetCategoryByIDRow, error)

	GetCategories(ctx context.Context) ([]GetCategoriesRow, error)
	// GetCategoriesBatch enqueues a GetCategories query into batch to be executed
	// later by the batch.
	GetCategoriesBatch(batch genericBatch)
	// GetCategoriesScan scans the result of an executed GetCategoriesBatch query.
	GetCategoriesScan(results pgx.BatchResults) ([]GetCategoriesRow, error)

	DeleteCategoryByID(ctx context.Context, categoryID int) (pgconn.CommandTag, error)
	// DeleteCategoryByIDBatch enqueues a DeleteCategoryByID query into batch to be executed
	// later by the batch.
	DeleteCategoryByIDBatch(batch genericBatch, categoryID int)
	// DeleteCategoryByIDScan scans the result of an executed DeleteCategoryByIDBatch query.
	DeleteCategoryByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertCategory(ctx context.Context, title string) (pgconn.CommandTag, error)
	// InsertCategoryBatch enqueues a InsertCategory query into batch to be executed
	// later by the batch.
	InsertCategoryBatch(batch genericBatch, title string)
	// InsertCategoryScan scans the result of an executed InsertCategoryBatch query.
	InsertCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertSubCategory(ctx context.Context, title string, parentID int) (pgconn.CommandTag, error)
	// InsertSubCategoryBatch enqueues a InsertSubCategory query into batch to be executed
	// later by the batch.
	InsertSubCategoryBatch(batch genericBatch, title string, parentID int)
	// InsertSubCategoryScan scans the result of an executed InsertSubCategoryBatch query.
	InsertSubCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateCategory(ctx context.Context, title string, categoryID int) (pgconn.CommandTag, error)
	// UpdateCategoryBatch enqueues a UpdateCategory query into batch to be executed
	// later by the batch.
	UpdateCategoryBatch(batch genericBatch, title string, categoryID int)
	// UpdateCategoryScan scans the result of an executed UpdateCategoryBatch query.
	UpdateCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateSubCategory(ctx context.Context, params UpdateSubCategoryParams) (pgconn.CommandTag, error)
	// UpdateSubCategoryBatch enqueues a UpdateSubCategory query into batch to be executed
	// later by the batch.
	UpdateSubCategoryBatch(batch genericBatch, params UpdateSubCategoryParams)
	// UpdateSubCategoryScan scans the result of an executed UpdateSubCategoryBatch query.
	UpdateSubCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, getCategoryByIDSQL, getCategoryByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetCategoryByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getCategoriesSQL, getCategoriesSQL); err != nil {
		return fmt.Errorf("prepare query 'GetCategories': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteCategoryByIDSQL, deleteCategoryByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteCategoryByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertCategorySQL, insertCategorySQL); err != nil {
		return fmt.Errorf("prepare query 'InsertCategory': %w", err)
	}
	if _, err := p.Prepare(ctx, insertSubCategorySQL, insertSubCategorySQL); err != nil {
		return fmt.Errorf("prepare query 'InsertSubCategory': %w", err)
	}
	if _, err := p.Prepare(ctx, updateCategorySQL, updateCategorySQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateCategory': %w", err)
	}
	if _, err := p.Prepare(ctx, updateSubCategorySQL, updateSubCategorySQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateSubCategory': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const getCategoryByIDSQL = `SELECT *
FROM category
WHERE category_id = $1;`

type GetCategoryByIDRow struct {
	CategoryID int              `json:"category_id"`
	Title      string           `json:"title"`
	ParentID   *int             `json:"parent_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

// GetCategoryByID implements Querier.GetCategoryByID.
func (q *DBQuerier) GetCategoryByID(ctx context.Context, categoryID int) (GetCategoryByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetCategoryByID")
	row := q.conn.QueryRow(ctx, getCategoryByIDSQL, categoryID)
	var item GetCategoryByIDRow
	if err := row.Scan(&item.CategoryID, &item.Title, &item.ParentID, &item.CreatedAt, &item.UpdatedAt); err != nil {
		return item, fmt.Errorf("query GetCategoryByID: %w", err)
	}
	return item, nil
}

// GetCategoryByIDBatch implements Querier.GetCategoryByIDBatch.
func (q *DBQuerier) GetCategoryByIDBatch(batch genericBatch, categoryID int) {
	batch.Queue(getCategoryByIDSQL, categoryID)
}

// GetCategoryByIDScan implements Querier.GetCategoryByIDScan.
func (q *DBQuerier) GetCategoryByIDScan(results pgx.BatchResults) (GetCategoryByIDRow, error) {
	row := results.QueryRow()
	var item GetCategoryByIDRow
	if err := row.Scan(&item.CategoryID, &item.Title, &item.ParentID, &item.CreatedAt, &item.UpdatedAt); err != nil {
		return item, fmt.Errorf("scan GetCategoryByIDBatch row: %w", err)
	}
	return item, nil
}

const getCategoriesSQL = `SELECT *
FROM category;`

type GetCategoriesRow struct {
	CategoryID *int             `json:"category_id"`
	Title      *string          `json:"title"`
	ParentID   *int             `json:"parent_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

// GetCategories implements Querier.GetCategories.
func (q *DBQuerier) GetCategories(ctx context.Context) ([]GetCategoriesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetCategories")
	rows, err := q.conn.Query(ctx, getCategoriesSQL)
	if err != nil {
		return nil, fmt.Errorf("query GetCategories: %w", err)
	}
	defer rows.Close()
	items := []GetCategoriesRow{}
	for rows.Next() {
		var item GetCategoriesRow
		if err := rows.Scan(&item.CategoryID, &item.Title, &item.ParentID, &item.CreatedAt, &item.UpdatedAt); err != nil {
			return nil, fmt.Errorf("scan GetCategories row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetCategories rows: %w", err)
	}
	return items, err
}

// GetCategoriesBatch implements Querier.GetCategoriesBatch.
func (q *DBQuerier) GetCategoriesBatch(batch genericBatch) {
	batch.Queue(getCategoriesSQL)
}

// GetCategoriesScan implements Querier.GetCategoriesScan.
func (q *DBQuerier) GetCategoriesScan(results pgx.BatchResults) ([]GetCategoriesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetCategoriesBatch: %w", err)
	}
	defer rows.Close()
	items := []GetCategoriesRow{}
	for rows.Next() {
		var item GetCategoriesRow
		if err := rows.Scan(&item.CategoryID, &item.Title, &item.ParentID, &item.CreatedAt, &item.UpdatedAt); err != nil {
			return nil, fmt.Errorf("scan GetCategoriesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetCategoriesBatch rows: %w", err)
	}
	return items, err
}

const deleteCategoryByIDSQL = `DELETE
FROM category
WHERE category_id = $1;`

// DeleteCategoryByID implements Querier.DeleteCategoryByID.
func (q *DBQuerier) DeleteCategoryByID(ctx context.Context, categoryID int) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteCategoryByID")
	cmdTag, err := q.conn.Exec(ctx, deleteCategoryByIDSQL, categoryID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteCategoryByID: %w", err)
	}
	return cmdTag, err
}

// DeleteCategoryByIDBatch implements Querier.DeleteCategoryByIDBatch.
func (q *DBQuerier) DeleteCategoryByIDBatch(batch genericBatch, categoryID int) {
	batch.Queue(deleteCategoryByIDSQL, categoryID)
}

// DeleteCategoryByIDScan implements Querier.DeleteCategoryByIDScan.
func (q *DBQuerier) DeleteCategoryByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteCategoryByIDBatch: %w", err)
	}
	return cmdTag, err
}

const insertCategorySQL = `INSERT INTO category(title)
VALUES(
       $1
       );`

// InsertCategory implements Querier.InsertCategory.
func (q *DBQuerier) InsertCategory(ctx context.Context, title string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertCategory")
	cmdTag, err := q.conn.Exec(ctx, insertCategorySQL, title)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertCategory: %w", err)
	}
	return cmdTag, err
}

// InsertCategoryBatch implements Querier.InsertCategoryBatch.
func (q *DBQuerier) InsertCategoryBatch(batch genericBatch, title string) {
	batch.Queue(insertCategorySQL, title)
}

// InsertCategoryScan implements Querier.InsertCategoryScan.
func (q *DBQuerier) InsertCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertCategoryBatch: %w", err)
	}
	return cmdTag, err
}

const insertSubCategorySQL = `INSERT INTO category(title, parent_id)
VALUES(
       $1,
       $2
       );`

// InsertSubCategory implements Querier.InsertSubCategory.
func (q *DBQuerier) InsertSubCategory(ctx context.Context, title string, parentID int) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertSubCategory")
	cmdTag, err := q.conn.Exec(ctx, insertSubCategorySQL, title, parentID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertSubCategory: %w", err)
	}
	return cmdTag, err
}

// InsertSubCategoryBatch implements Querier.InsertSubCategoryBatch.
func (q *DBQuerier) InsertSubCategoryBatch(batch genericBatch, title string, parentID int) {
	batch.Queue(insertSubCategorySQL, title, parentID)
}

// InsertSubCategoryScan implements Querier.InsertSubCategoryScan.
func (q *DBQuerier) InsertSubCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertSubCategoryBatch: %w", err)
	}
	return cmdTag, err
}

const updateCategorySQL = `UPDATE category
SET title = $1,
    updated_at = NOW()
WHERE category_id = $2;`

// UpdateCategory implements Querier.UpdateCategory.
func (q *DBQuerier) UpdateCategory(ctx context.Context, title string, categoryID int) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateCategory")
	cmdTag, err := q.conn.Exec(ctx, updateCategorySQL, title, categoryID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateCategory: %w", err)
	}
	return cmdTag, err
}

// UpdateCategoryBatch implements Querier.UpdateCategoryBatch.
func (q *DBQuerier) UpdateCategoryBatch(batch genericBatch, title string, categoryID int) {
	batch.Queue(updateCategorySQL, title, categoryID)
}

// UpdateCategoryScan implements Querier.UpdateCategoryScan.
func (q *DBQuerier) UpdateCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateCategoryBatch: %w", err)
	}
	return cmdTag, err
}

const updateSubCategorySQL = `UPDATE category
SET title = $1,
    parent_id = $2,
    updated_at = NOW()
WHERE category_id = $3;`

type UpdateSubCategoryParams struct {
	Title      string
	ParentID   int
	CategoryID int
}

// UpdateSubCategory implements Querier.UpdateSubCategory.
func (q *DBQuerier) UpdateSubCategory(ctx context.Context, params UpdateSubCategoryParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateSubCategory")
	cmdTag, err := q.conn.Exec(ctx, updateSubCategorySQL, params.Title, params.ParentID, params.CategoryID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateSubCategory: %w", err)
	}
	return cmdTag, err
}

// UpdateSubCategoryBatch implements Querier.UpdateSubCategoryBatch.
func (q *DBQuerier) UpdateSubCategoryBatch(batch genericBatch, params UpdateSubCategoryParams) {
	batch.Queue(updateSubCategorySQL, params.Title, params.ParentID, params.CategoryID)
}

// UpdateSubCategoryScan implements Querier.UpdateSubCategoryScan.
func (q *DBQuerier) UpdateSubCategoryScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateSubCategoryBatch: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
