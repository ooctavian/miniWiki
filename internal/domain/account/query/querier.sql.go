// Code generated by pggen. DO NOT EDIT.

package query

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateAccount(ctx context.Context, email string, password string) (pgconn.CommandTag, error)
	// CreateAccountBatch enqueues a CreateAccount query into batch to be executed
	// later by the batch.
	CreateAccountBatch(batch genericBatch, email string, password string)
	// CreateAccountScan scans the result of an executed CreateAccountBatch query.
	CreateAccountScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateAccount(ctx context.Context, params UpdateAccountParams) (pgconn.CommandTag, error)
	// UpdateAccountBatch enqueues a UpdateAccount query into batch to be executed
	// later by the batch.
	UpdateAccountBatch(batch genericBatch, params UpdateAccountParams)
	// UpdateAccountScan scans the result of an executed UpdateAccountBatch query.
	UpdateAccountScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	GetAccount(ctx context.Context, email string) (GetAccountRow, error)
	// GetAccountBatch enqueues a GetAccount query into batch to be executed
	// later by the batch.
	GetAccountBatch(batch genericBatch, email string)
	// GetAccountScan scans the result of an executed GetAccountBatch query.
	GetAccountScan(results pgx.BatchResults) (GetAccountRow, error)

	GetAccountByID(ctx context.Context, accountID int) (GetAccountByIDRow, error)
	// GetAccountByIDBatch enqueues a GetAccountByID query into batch to be executed
	// later by the batch.
	GetAccountByIDBatch(batch genericBatch, accountID int)
	// GetAccountByIDScan scans the result of an executed GetAccountByIDBatch query.
	GetAccountByIDScan(results pgx.BatchResults) (GetAccountByIDRow, error)

	GetAccountStatus(ctx context.Context, accountID int) (*bool, error)
	// GetAccountStatusBatch enqueues a GetAccountStatus query into batch to be executed
	// later by the batch.
	GetAccountStatusBatch(batch genericBatch, accountID int)
	// GetAccountStatusScan scans the result of an executed GetAccountStatusBatch query.
	GetAccountStatusScan(results pgx.BatchResults) (*bool, error)

	UpdateAccountStatus(ctx context.Context, status bool, accountID int) (pgconn.CommandTag, error)
	// UpdateAccountStatusBatch enqueues a UpdateAccountStatus query into batch to be executed
	// later by the batch.
	UpdateAccountStatusBatch(batch genericBatch, status bool, accountID int)
	// UpdateAccountStatusScan scans the result of an executed UpdateAccountStatusBatch query.
	UpdateAccountStatusScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, createAccountSQL, createAccountSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateAccount': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAccountSQL, updateAccountSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAccount': %w", err)
	}
	if _, err := p.Prepare(ctx, getAccountSQL, getAccountSQL); err != nil {
		return fmt.Errorf("prepare query 'GetAccount': %w", err)
	}
	if _, err := p.Prepare(ctx, getAccountByIDSQL, getAccountByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetAccountByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getAccountStatusSQL, getAccountStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'GetAccountStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAccountStatusSQL, updateAccountStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAccountStatus': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const createAccountSQL = `INSERT INTO
    account(email, password, active)
VALUES(
       $1,
       $2,
       true
       );`

// CreateAccount implements Querier.CreateAccount.
func (q *DBQuerier) CreateAccount(ctx context.Context, email string, password string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateAccount")
	cmdTag, err := q.conn.Exec(ctx, createAccountSQL, email, password)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query CreateAccount: %w", err)
	}
	return cmdTag, err
}

// CreateAccountBatch implements Querier.CreateAccountBatch.
func (q *DBQuerier) CreateAccountBatch(batch genericBatch, email string, password string) {
	batch.Queue(createAccountSQL, email, password)
}

// CreateAccountScan implements Querier.CreateAccountScan.
func (q *DBQuerier) CreateAccountScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec CreateAccountBatch: %w", err)
	}
	return cmdTag, err
}

const updateAccountSQL = `UPDATE account
SET email = $1,
    password = $2,
    updated_at = NOW()
WHERE
    account.account_id = $3;`

type UpdateAccountParams struct {
	Email     string
	Password  string
	AccountID int
}

// UpdateAccount implements Querier.UpdateAccount.
func (q *DBQuerier) UpdateAccount(ctx context.Context, params UpdateAccountParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateAccount")
	cmdTag, err := q.conn.Exec(ctx, updateAccountSQL, params.Email, params.Password, params.AccountID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateAccount: %w", err)
	}
	return cmdTag, err
}

// UpdateAccountBatch implements Querier.UpdateAccountBatch.
func (q *DBQuerier) UpdateAccountBatch(batch genericBatch, params UpdateAccountParams) {
	batch.Queue(updateAccountSQL, params.Email, params.Password, params.AccountID)
}

// UpdateAccountScan implements Querier.UpdateAccountScan.
func (q *DBQuerier) UpdateAccountScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateAccountBatch: %w", err)
	}
	return cmdTag, err
}

const getAccountSQL = `SELECT account_id, email::TEXT, password, active
FROM account
WHERE email = $1::domain_email;`

type GetAccountRow struct {
	AccountID int     `json:"account_id"`
	Email     string  `json:"email"`
	Password  *string `json:"password"`
	Active    *bool   `json:"active"`
}

// GetAccount implements Querier.GetAccount.
func (q *DBQuerier) GetAccount(ctx context.Context, email string) (GetAccountRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetAccount")
	row := q.conn.QueryRow(ctx, getAccountSQL, email)
	var item GetAccountRow
	if err := row.Scan(&item.AccountID, &item.Email, &item.Password, &item.Active); err != nil {
		return item, fmt.Errorf("query GetAccount: %w", err)
	}
	return item, nil
}

// GetAccountBatch implements Querier.GetAccountBatch.
func (q *DBQuerier) GetAccountBatch(batch genericBatch, email string) {
	batch.Queue(getAccountSQL, email)
}

// GetAccountScan implements Querier.GetAccountScan.
func (q *DBQuerier) GetAccountScan(results pgx.BatchResults) (GetAccountRow, error) {
	row := results.QueryRow()
	var item GetAccountRow
	if err := row.Scan(&item.AccountID, &item.Email, &item.Password, &item.Active); err != nil {
		return item, fmt.Errorf("scan GetAccountBatch row: %w", err)
	}
	return item, nil
}

const getAccountByIDSQL = `SELECT email::TEXT, password, updated_at, created_at
FROM account
WHERE account_id = $1;`

type GetAccountByIDRow struct {
	Email     string           `json:"email"`
	Password  *string          `json:"password"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

// GetAccountByID implements Querier.GetAccountByID.
func (q *DBQuerier) GetAccountByID(ctx context.Context, accountID int) (GetAccountByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetAccountByID")
	row := q.conn.QueryRow(ctx, getAccountByIDSQL, accountID)
	var item GetAccountByIDRow
	if err := row.Scan(&item.Email, &item.Password, &item.UpdatedAt, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("query GetAccountByID: %w", err)
	}
	return item, nil
}

// GetAccountByIDBatch implements Querier.GetAccountByIDBatch.
func (q *DBQuerier) GetAccountByIDBatch(batch genericBatch, accountID int) {
	batch.Queue(getAccountByIDSQL, accountID)
}

// GetAccountByIDScan implements Querier.GetAccountByIDScan.
func (q *DBQuerier) GetAccountByIDScan(results pgx.BatchResults) (GetAccountByIDRow, error) {
	row := results.QueryRow()
	var item GetAccountByIDRow
	if err := row.Scan(&item.Email, &item.Password, &item.UpdatedAt, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("scan GetAccountByIDBatch row: %w", err)
	}
	return item, nil
}

const getAccountStatusSQL = `SELECT active
FROM account
WHERE account_id = $1;`

// GetAccountStatus implements Querier.GetAccountStatus.
func (q *DBQuerier) GetAccountStatus(ctx context.Context, accountID int) (*bool, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetAccountStatus")
	row := q.conn.QueryRow(ctx, getAccountStatusSQL, accountID)
	var item *bool
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query GetAccountStatus: %w", err)
	}
	return item, nil
}

// GetAccountStatusBatch implements Querier.GetAccountStatusBatch.
func (q *DBQuerier) GetAccountStatusBatch(batch genericBatch, accountID int) {
	batch.Queue(getAccountStatusSQL, accountID)
}

// GetAccountStatusScan implements Querier.GetAccountStatusScan.
func (q *DBQuerier) GetAccountStatusScan(results pgx.BatchResults) (*bool, error) {
	row := results.QueryRow()
	var item *bool
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan GetAccountStatusBatch row: %w", err)
	}
	return item, nil
}

const updateAccountStatusSQL = `UPDATE account
SET active = $1
WHERE account_id = $2;`

// UpdateAccountStatus implements Querier.UpdateAccountStatus.
func (q *DBQuerier) UpdateAccountStatus(ctx context.Context, status bool, accountID int) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateAccountStatus")
	cmdTag, err := q.conn.Exec(ctx, updateAccountStatusSQL, status, accountID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateAccountStatus: %w", err)
	}
	return cmdTag, err
}

// UpdateAccountStatusBatch implements Querier.UpdateAccountStatusBatch.
func (q *DBQuerier) UpdateAccountStatusBatch(batch genericBatch, status bool, accountID int) {
	batch.Queue(updateAccountStatusSQL, status, accountID)
}

// UpdateAccountStatusScan implements Querier.UpdateAccountStatusScan.
func (q *DBQuerier) UpdateAccountStatusScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateAccountStatusBatch: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
